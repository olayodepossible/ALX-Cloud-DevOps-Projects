AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates server stack for Akinfemiwa Abayomi's final IaC project

Parameters:
  EnvironmentName:
    Description: Base name for all resources in this template.
    Type: String
    # EC2 default AMI to use to deploy the instance
  EC2InstanceAMI:
    Description: Ec2 instance AMI
    Type: String

Resources:
  # IAM role to allow the EC2 instance to access files from the S3 bucket
  S3BucketAccessfromEC2:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # Ec2 isntance profile
  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref S3BucketAccessfromEC2

  # Loadbalancer security group to allow Ingress and and Egress http
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: http access to Load Balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-myVPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Ec2 instance security group to allow ssh anf http protocols
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access http from the ec2 instance and allow ssh
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-myVPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # EC2 launch Configuration to deploy ec2 initial configurations
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash  
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "<div>" > index.html
          echo "<h1>This is Akinfemiwa Abayomi udagram project</h1>" >> index.html
          echo "<h3>it works! Udagram, Udacity</h3>" >> index.html
          echo "<h5>I am happy that it works! ALX-Udagram</h5>" >> index.html
          echo "<P>You can check the link below to see the script in repo!</P>" >> index.html
          echo "<a href="https://github.com/olayodepossible/ALX-Cloud-DevOps-Projects/tree/main/project-2/project2"  target="_blank">myRepo</a>" >> index.html
          echo "</div>" >> index.html

      ImageId: !Ref EC2InstanceAMI
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
  # AutoScaling group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVATE1-SUBNETS"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVATE2-SUBNETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "4"
      MaxSize: "5"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  # Application loadbalancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC1-SUBNETS"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC2-SUBNETS"
      SecurityGroups:
        - Ref: LoadBalancerSG
  # load balancer listener
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "LBListener"
      Priority: 1

  # laod balancer target group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 6
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-myVPC"

Outputs:
  LoadBalancer:
    Description: Output referene for the load balancer
    Value: !Ref WebAppLB

  LoadBalancerUrl:
    Description: The loadbalancer url
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
